from tkinter import *
import tkinter.font
import random
from touhou import enterMatrix
from touhou import logical_victory_test
from touhou import strategic_victory_test
from touhou import binar_array
import numpy as np

moves_counter = 0  # создание счетчика ходов игроков
root = Tk()
root.title("Крестики Нолики на максималках - БММ 2023")
canv = Canvas(root, width=root.winfo_screenwidth(), height=root.winfo_screenheight(), bg="white")

buttons = []  # матрица наших клеток-кнопок
# создание проверки вывода победы в стратегическое поле
global match_results
match_results = enterMatrix(9, 9)

global Hakurai_Reimu
Hakurai_Reimu = 0

global AI_krest_point
AI_krest_point = 0

global AI_null_point
AI_null_point = 0

global unvictory
unvictory = 0


global AI_turn
AI_turn = False

def main_start_game():
    global AI_null_point
    global AI_krest_point
    global Hakurai_Reimu
    print(f"Hakurai Reimu = {Hakurai_Reimu}")
    if Hakurai_Reimu >= 1:
        for i in range(9):
            for j in range(9):
                if buttons[i][j] != 0:
                    buttons[i][j].destroy()

    global moves_counter
    global match_results
    moves_counter = 1
    buttons.clear()  # очистка массива с кнопками
    deleting()  # удаление всех нарисованных линий
    pole()  # создание разметки
    buttons_creating()  # создание новых кнопок

    Label(root, text="стратегическое поле", font='Times 17').place(x=1350 - 210, y=237)
    print(f"prev_match_results = {match_results}")
    match_results = enterMatrix(9, 9)  # очистка матрицы результатов игры, создание новых дефолтных
    binar_array.clear()  # очистка бинарного массива
    for i in range(9):
        binar_array.append(69)
    print(f"last_binar_array = {binar_array}")
    techical_function()
    Hakurai_Reimu += 1
    AI_null_point = 0
    AI_krest_point = 0

    Label(root, text=f"ход: ", font='Times 17').place(x=1055, y=33)
    Label(root, text="стратегическое поле", font='Times 17').place(x=1350 - 210, y=237)  #
    turn_label.config(text="1")
    print(f"матрица обнулилась - \n {match_results}")


def techical_function():
    line = canv.find_all()
    print(f"количество объектов canv = {len(line)}")


def game_logic_unclicking(number):
    for i in range(9):
        for j in range(9):
            if buttons[i][j] != 0:
                buttons[i][j].config(state=DISABLED)

    # A_field = ['0', '3', '6', '27', '30', '33', '54', '57', '60']
    test_numb = number - 1
    if test_numb == 0 or test_numb == 3 or test_numb == 6 or test_numb == 27 or test_numb == 30 or test_numb == 33 or \
            test_numb == 54 or test_numb == 57 or test_numb == 60:
        if match_results[0, 0] != 69 and match_results[0, 1] != 69 and match_results[0, 2] != 69 and match_results[
            1, 0] != 69 and \
                match_results[1, 1] != 69 and match_results[1, 2] != 69 and match_results[2, 0] != 69 and match_results[
            2, 1] != 69 \
                and match_results[2, 2] != 69:
            test_enable()
        else:
            for i in range(0, 3):  # поле 1
                for j in range(0, 3):
                    if buttons[i][j] != 0:
                        buttons[i][j].config(state=NORMAL)

    # B_field = ['0', '3', '6', '27', '30', '33', '54', '57', '60']
    if test_numb == 1 or test_numb == 4 or test_numb == 7 or test_numb == 28 or test_numb == 31 or test_numb == 34 or \
            test_numb == 55 or test_numb == 58 or test_numb == 61:
        if match_results[0, 3] != 69 and match_results[0, 4] != 69 and match_results[0, 5] != 69 and match_results[
            1, 3] != 69 and \
                match_results[1, 4] != 69 and match_results[1, 5] != 69 and match_results[2, 3] != 69 and match_results[
            2, 4] != 69 \
                and match_results[2, 5] != 69:
            test_enable()
        else:
            for i in range(0, 3):  # поле 2
                for j in range(3, 6):
                    if buttons[i][j] != 0:
                        buttons[i][j].config(state=NORMAL)

    if test_numb == 2 or test_numb == 5 or test_numb == 8 or test_numb == 29 or test_numb == 32 or test_numb == 35 or \
            test_numb == 56 or test_numb == 59 or test_numb == 62:
        if match_results[0, 6] != 69 and match_results[0, 7] != 69 and match_results[0, 8] != 69 and match_results[
            1, 6] != 69 and \
                match_results[1, 7] != 69 and match_results[1, 8] != 69 and match_results[2, 6] != 69 and match_results[
            2, 7] != 69 \
                and match_results[2, 8] != 69:
            test_enable()
        else:
            for i in range(0, 3):  # поле 3
                for j in range(6, 9):
                    if buttons[i][j] != 0:
                        buttons[i][j].config(state=NORMAL)

    if test_numb == 9 or test_numb == 12 or test_numb == 15 or test_numb == 36 or test_numb == 39 or test_numb == 42 or \
            test_numb == 63 or test_numb == 66 or test_numb == 69:
        if match_results[3, 0] != 69 and match_results[3, 1] != 69 and match_results[3, 2] != 69 and match_results[
            4, 0] != 69 and \
                match_results[4, 1] != 69 and match_results[4, 2] != 69 and match_results[5, 0] != 69 and match_results[
            5, 1] != 69 \
                and match_results[5, 2] != 69:
            test_enable()
        else:
            for i in range(3, 6):  # поле 4
                for j in range(0, 3):
                    if buttons[i][j] != 0:
                        buttons[i][j].config(state=NORMAL)

    if test_numb == 9 + 1 or test_numb == 12 + 1 or test_numb == 15 + 1 or test_numb == 36 + 1 or test_numb == 39 + 1 or test_numb == 42 + 1 or \
            test_numb == 63 + 1 or test_numb == 66 + 1 or test_numb == 69 + 1:
        if match_results[3, 3] != 69 and match_results[3, 4] != 69 and match_results[3, 5] != 69 and match_results[
            4, 3] != 69 and \
                match_results[4, 4] != 69 and match_results[4, 5] != 69 and match_results[5, 3] != 69 and match_results[
            5, 4] != 69 \
                and match_results[5, 5] != 69:
            test_enable()
        else:
            for i in range(3, 6):  # поле 5
                for j in range(3, 6):
                    if buttons[i][j] != 0:
                        buttons[i][j].config(state=NORMAL)

    if test_numb == 9 + 2 or test_numb == 12 + 2 or test_numb == 15 + 2 or test_numb == 36 + 2 or test_numb == 39 + 2 or test_numb == 42 + 2 or \
            test_numb == 63 + 2 or test_numb == 66 + 2 or test_numb == 69 + 2:
        if match_results[3, 6] != 69 and match_results[3, 7] != 69 and match_results[3, 8] != 69 and match_results[
            4, 6] != 69 and \
                match_results[4, 7] != 69 and match_results[4, 8] != 69 and match_results[5, 6] != 69 and match_results[
            5, 7] != 69 \
                and match_results[5, 8] != 69:
            test_enable()
        else:
            for i in range(3, 6):  # поле 6
                for j in range(6, 9):
                    if buttons[i][j] != 0:
                        buttons[i][j].config(state=NORMAL)

    if test_numb == 18 or test_numb == 21 or test_numb == 24 or test_numb == 45 or test_numb == 48 or test_numb == 51 or \
            test_numb == 72 or test_numb == 75 or test_numb == 78:
        if match_results[0, 6] != 69 and match_results[1, 7] != 69 and match_results[2, 8] != 69 and match_results[
            0, 6] != 69 and \
                match_results[1, 7] != 69 and match_results[2, 8] != 69 and match_results[0, 6] != 69 and match_results[
            1, 7] != 69 \
                and match_results[2, 8] != 69:
            test_enable()
        else:
            for i in range(6, 9):  # поле 7
                for j in range(0, 3):
                    if buttons[i][j] != 0:
                        buttons[i][j].config(state=NORMAL)

    if test_numb == 18 + 1 or test_numb == 21 + 1 or test_numb == 24 + 1 or test_numb == 45 + 1 or test_numb == 48 + 1 or test_numb == 51 + 1 or \
            test_numb == 72 + 1 or test_numb == 75 + 1 or test_numb == 78 + 1:
        if match_results[6, 3] != 69 and match_results[7, 4] != 69 and match_results[8, 5] != 69 and match_results[
            6, 3] != 69 and \
                match_results[7, 4] != 69 and match_results[8, 5] != 69 and match_results[6, 3] != 69 and match_results[
            7, 4] != 69 \
                and match_results[8, 5] != 69:
            test_enable()
        else:
            for i in range(6, 9):  # поле 8
                for j in range(3, 6):
                    if buttons[i][j] != 0:
                        buttons[i][j].config(state=NORMAL)

    if test_numb == 18 + 2 or test_numb == 21 + 2 or test_numb == 24 + 2 or test_numb == 45 + 2 or test_numb == 48 + 2 or test_numb == 51 + 2 or \
            test_numb == 72 + 2 or test_numb == 75 + 2 or test_numb == 78 + 2:
        if match_results[6, 6] != 69 and match_results[7, 7] != 69 and match_results[8, 8] != 69 and match_results[
            6, 6] != 69 and \
                match_results[7, 7] != 69 and match_results[8, 8] != 69 and match_results[6, 6] != 69 and match_results[
            7, 7] != 69 \
                and match_results[8, 8] != 69:
            test_enable()
        else:
            for i in range(6, 9):  # поле 9
                for j in range(6, 9):
                    if buttons[i][j] != 0:
                        buttons[i][j].config(state=NORMAL)


def krest_victory():
    children = Toplevel(root)
    children.title("Результаты игры")
    children.geometry("1500x500")
    results_label = Label(children, text="Игрок за крестиков добился стратегической победы.\n \n \n \n"
                                         "Для новой игры, пожалуйста, нажмите <Новая Игра> в основной программе",
                          font='Times 30').place(x=100, y=100)


def nolik_victory():
    children = Toplevel(root)
    children.title("Результаты игры")
    children.geometry("1500x500")
    results_label = Label(children, text="Игрок за ноликов добился стратегической победы.\n \n \n \n"
                                         "Для новой игры, пожалуйста, нажмите <Новая Игра> в основной программе",
                          font='Times 30').place(x=100, y=100)


def unvictory_victory():
    children = Toplevel(root)
    children.title("Результаты игры")
    children.geometry("1500x500")
    results_label = Label(children, text="Ни один из игроков не смог достигнуть стратегической победы.\n \n \n \n"
                                         "Для новой игры, пожалуйста, нажмите <Новая Игра> в основной программе",
                          font='Times 30').place(x=100, y=100)


def deleting():
    line = canv.find_all()
    for i in range(26, len(line)):
        canv.delete(line[i])


def button_click(xpos, ypos, i, j, number):  # функция для кнопок - вывод крестика/нолика в зависимости от хода
    global moves_counter
    global unvictory
    global AI_null_point
    global AI_krest_point
    global AI_turn

    if moves_counter % 2 == 1:
        print(f"номер  = {number}")
        if number == 27 or number == 54:  # а это костыль =)
            canv.create_line(xpos - 20 + 210, ypos - 20 - 20, xpos + 20 + 210, ypos + 20 - 20, width=3, fill="#e31e1e")
            canv.create_line(xpos + 20 + 210, ypos - 20 - 20, xpos - 20 + 210, ypos + 20 - 20, width=3, fill="#e31e1e")
            match_results[i][j] = 1
            print('условие выполнено')
        else:
            # определение, будет крестик или нолик в зависимости от глобального счетчика
            canv.create_line(xpos - 20 + 210, ypos - 20, xpos + 20 + 210, ypos + 20, width=3, fill="#e31e1e")
            canv.create_line(xpos + 20 + 210, ypos - 20, xpos - 20 + 210, ypos + 20, width=3, fill="#e31e1e")
            match_results[i][j] = 1
    else:
        print(f"номер  = {number}")
        if number == 27 or number == 54:  # а это второй костыль =):
            canv.create_oval(xpos + 20 + 210, ypos - 20 - 20, xpos - 20 + 210, ypos + 20 - 20, outline="blue", width=2)
            match_results[i][j] = 0
            print('условие выполнено')
        else:
            canv.create_oval(xpos + 20 + 210, ypos - 20, xpos - 20 + 210, ypos + 20, outline="blue", width=2)
            match_results[i][j] = 0
    moves_counter += 1
    print(f"счетчик ходов: {moves_counter}")
    buttons[i][j].destroy()  # уничтожение кнопки после ее нажатия
    buttons[i][j] = 0
    print(match_results)
    turn_label.config(text=moves_counter)
    # strategic_victory_test(match_results)
    strat_pole_figures_creator(strategic_victory_test(match_results))

    game_logic_unclicking(number)

    AI_turn = not AI_turn
    print(f"AI_turn = {AI_turn}")
    # techical_function()
    # cirno = np.array(buttons)
    # print(f"buttons = {buttons}")
    # print(f"cirno leng = {cirno.size}")

    if logical_victory_test(binar_array) == 1:
        if moves_counter % 2 != 0:
            print(f"стратегическая победа ноликов")

            all_the_buttons_disable()
            nolik_victory()
            unvictory = 1

        else:
            print("стратегическая победа крестиков")

            all_the_buttons_disable()
            krest_victory()
            unvictory = 1

    if unvictory == 0 and moves_counter == 81:
        unvictory_victory()

    while moves_counter%2 == 0 and AI_krest_point > 0 and logical_victory_test(binar_array) != 1 and AI_turn == False:
        AI_krestik(buttons)
        AI_turn = not AI_turn


def strat_pole_figures_creator(number):
    global moves_counter
    print(f"strategiv_creator number = {number}")
    if number == 0:
        if moves_counter % 2 == 0:
            canv.create_line(1105, 290, 1195, 375, width=3, fill="#e31e1e")
            canv.create_line(1195, 290, 1105, 375, width=3, fill="#e31e1e")
        else:
            canv.create_oval(1105, 290, 1195, 375, outline="blue", width=2)

    if number == 1:
        if moves_counter % 2 == 0:
            canv.create_line(1205, 290, 1295, 375, width=3, fill="#e31e1e")
            canv.create_line(1295, 290, 1205, 375, width=3, fill="#e31e1e")
        else:
            canv.create_oval(1205, 290, 1295, 375, outline="blue", width=2)

    if number == 2:
        if moves_counter % 2 == 0:
            canv.create_line(1305, 290, 1395, 375, width=3, fill="#e31e1e")
            canv.create_line(1395, 290, 1305, 375, width=3, fill="#e31e1e")
        else:
            canv.create_oval(1305, 290, 1395, 375, outline="blue", width=2)

    if number == 3:
        if moves_counter % 2 == 0:
            canv.create_line(1105, 390, 1195, 475, width=3, fill="#e31e1e")
            canv.create_line(1195, 390, 1105, 475, width=3, fill="#e31e1e")
        else:
            canv.create_oval(1105, 390, 1195, 475, outline="blue", width=2)

    if number == 4:
        if moves_counter % 2 == 0:
            canv.create_line(1205, 390, 1295, 475, width=3, fill="#e31e1e")
            canv.create_line(1295, 390, 1205, 475, width=3, fill="#e31e1e")
        else:
            canv.create_oval(1205, 390, 1295, 475, outline="blue", width=2)

    if number == 5:
        if moves_counter % 2 == 0:
            canv.create_line(1305, 390, 1395, 475, width=3, fill="#e31e1e")
            canv.create_line(1395, 390, 1305, 475, width=3, fill="#e31e1e")
        else:
            canv.create_oval(1305, 390, 1395, 475, outline="blue", width=2)

    if number == 6:
        if moves_counter % 2 == 0:
            canv.create_line(1105, 490, 1195, 575, width=3, fill="#e31e1e")
            canv.create_line(1195, 490, 1105, 575, width=3, fill="#e31e1e")
        else:
            canv.create_oval(1105, 490, 1195, 575, outline="blue", width=2)

    if number == 7:
        if moves_counter % 2 == 0:
            canv.create_line(1205, 490, 1295, 575, width=3, fill="#e31e1e")
            canv.create_line(1295, 490, 1205, 575, width=3, fill="#e31e1e")
        else:
            canv.create_oval(1205, 490, 1295, 575, outline="blue", width=2)

    if number == 8:
        if moves_counter % 2 == 0:
            canv.create_line(1305, 490, 1395, 575, width=3, fill="#e31e1e")
            canv.create_line(1395, 490, 1305, 575, width=3, fill="#e31e1e")
        else:
            canv.create_oval(1305, 490, 1395, 575, outline="blue", width=2)


# создание матрицы, выводящей 0 и 1 в зависимости от того, какая фигура в клетке. изначально везде будет inf

# создание кнопок для игры. - с помощью матрицы и модуля config, фиксируя для каждой кнопки свои уникальные настройки
def buttons_creating():
    testcount = 0

    x = 15  # координата по оси абсцисс
    y = 15  # координата по оси ординат

    local_counter_oy = 0

    for i in range(9):
        local_counter_oy += 1
        local_counter_ox = 0
        buttons.append([])
        for j in range(9):
            local_counter_ox += 1
            but = Button(root, text=testcount + 1, background='white', foreground="white", font='Times 8', height=5,
                         width=11, relief='solid')
            # написать размещение

            if (local_counter_ox == 4 or local_counter_ox == 7):
                but.place(x=x + 20, y=y)
                x += 20

            if (local_counter_oy == 4 or local_counter_oy == 7):
                but.place(x=x, y=y)

            else:
                but.place(x=x, y=y)
            buttons[i].append(but)
            testcount += 1
            x += 75

            if testcount == 27 or testcount == 54:
                y += 20

            but.config(
                command=lambda x=x - 247, y=y + 41, i=i, j=j, testcount=testcount: button_click(x, y, i, j,
                                                                                                testcount))  # фиксация функций клеток
        x = 15
        y += 75

    print(f"buttons = {buttons}")
    cirno = np.array(buttons)
    print(f"cirno leng = {cirno.size}")


def pole():
    # создание мини-поля стратегического положения

    canv.create_line(1100, 380, 1400, 380, width=3)
    canv.create_line(1100, 480, 1400, 480, width=3)
    canv.create_line(1200, 580, 1200, 280, width=3)
    canv.create_line(1300, 580, 1300, 280, width=3)

    canv.create_line(1400, 280, 1400, 580, width=4)
    canv.create_line(1100, 280, 1100, 580, width=4)
    canv.create_line(1100, 580, 1400, 580, width=4)
    canv.create_line(1400, 280, 1100, 280, width=4)

    # создание разделительных линий и размещение полей 3х3 на общем поле (+ разметка).

    canv.create_line(0, 10, 740, 10, width=7)  # 1 горизонтальная линия
    canv.create_line(0, 253, 740, 253, width=7)  # 2 горизонтальная линия
    canv.create_line(0, 497, 740, 497, width=7)  # 3 горизонтальная линия
    canv.create_line(0, 740, 740, 740, width=7)  # 4 горизонтальная линия

    canv.create_line(0, 90, 740, 90, width=3)
    canv.create_line(0, 170, 740, 170, width=3)

    canv.create_line(0, 340, 740, 340, width=3)
    canv.create_line(0, 420, 740, 420, width=3)

    canv.create_line(0, 580, 740, 580, width=3)
    canv.create_line(0, 660, 740, 660, width=3)

    # создание вертикальной разметки

    canv.create_line(5, 10, 5, 740, width=7)  # 1 вертикальная линия
    canv.create_line(250, 10, 250, 740, width=7)  # 2 вертикальная линия
    canv.create_line(495, 10, 495, 740, width=7)  # 3 вертикальная линия
    canv.create_line(737, 10, 737, 740, width=7)  # 4 вертикальная линия

    # мини - линии разметки

    canv.create_line(90, 10, 90, 740, width=3)
    canv.create_line(170, 10, 170, 740, width=3)

    canv.create_line(330, 10, 330, 740, width=3)
    canv.create_line(410, 10, 410, 740, width=3)

    canv.create_line(575, 10, 575, 740, width=3)
    canv.create_line(655, 10, 655, 740, width=3)


# создание кнопки новой игры
btn_new_game = Button(root, text="Новая Игра", font='Times 16', height=2, width=15, command=main_start_game).place(
    x=850, y=5)


def test_enable():
    for i in range(9):
        for j in range(9):
            if buttons[i][j] != 0:
                buttons[i][j].config(state=NORMAL)


def all_the_buttons_disable():
    for i in range(9):
        for j in range(9):
            if buttons[i][j] != 0:
                buttons[i][j].config(state=DISABLED)


def annotation_button():
    children = Toplevel(root)
    children.title("Правила игры")
    w = root.winfo_screenwidth()
    h = root.winfo_screenheight()
    children.geometry(f'{w}x{h}')
    lable_font = tkinter.font.Font(weight='bold', family='arial', size=20)
    Label(children,
      text="Игра крестики нолики на максималках происходит в доске 3х3, которая состоит из полей 3х3 которые в свою очередь состоят из 9 клеток. \n"
           "У каждого поля есть свой номер (от 1 до 81) \n  \n"
           "Механика игры: \n"
           "Первый ход  \n"
           "Крестики делают ход в любое поле и любую клетку. \n"
           "Нолик уже имеет ограничение - расположение поля ( в которое  должен будет сходить нолик )\nна общей доске должно  соответствовать расположению клетки \n"
           "в которую сходил предыдущий игрок в его локальном поле \n"
           "После первого хода такое ограничение будет присутствовать всю игру для крестиков и ноликов (за исключением пункта **)\n"
           "То есть каждый игрок своим ходом выбирает поле, в которое должен будет сходить его оппонент \n "
           "\n \n ** в случае если вам необходимо сходить в поле без свободных клеток ,  вы можете выбрать любую свободную клетку на доске \n"
           "\n  Победа:  \n"
           "Когда в поле один из игроков собирает 3 своих фигуры  в ряд на одном из полей, это поле помечается его фигурой. \n "
           "Игра на поле может продолжиться, но поле останется за игроком останется до конца матча.  \n"
           "Побеждает тот кто первый ( на стратегической доске ) соберёт ряд из 3 полей своей фигуры",
      #font=lable_font, bg="green").place(relx=.5, rely=.5, anchor="center", width=w, height=h)
    font=lable_font).pack()
    Label(children, text='вроде работает', font=lable_font).pack()
    children.resizable(False,False)

def AI_side_button():
    children = Toplevel(root)
    children.title("Игра с ИИ")
    children.geometry("650x300")
    Label(children, text="Пожалуйста, выберите, за кого будет играть ИИ?", font='Times 20').place(x=30, y=140)
    global Hakurai_Reimu

    AI_krest_button = Button(children, text="ИИ за крестиков (Х)", font='Times 16', height=2, width=16, relief='solid', \
                             command=lambda: [AI_krestik(buttons), \
                                              Label(children,
                                                    text="Пожалуйста, закройте окно и наслаждайтесь игрой =) \n \n "
                                                         "Главный разрабочик - @Cybernetic_Anime_Girl ",
                                                    font='Times 16').place(x=90, y=200), \
                                              AI_krest_button.configure(state=DISABLED),
                                              AI_null_button.configure(state=DISABLED)])

    AI_null_button = Button(children, text="ИИ за ноликов (О)", font='Times 16', height=2, width=16, relief='solid', \
                            command=lambda: [AI_nolik(buttons), \
                                             Label(children,
                                                   text="Пожалуйста, закройте окно и наслаждайтесь игрой =) \n \n "
                                                        "Главный разрабочик - @Cybernetic_Anime_Girl ",
                                                   font='Times 16').place(x=90, y=200), \
                                             AI_krest_button.configure(state=DISABLED),
                                             AI_null_button.configure(state=DISABLED)])
    AI_krest_button.pack()
    AI_null_button.pack()

    # проврека, можно ли включить в игру ИИ на данный момент

    if moves_counter == 0:
        AI_krest_button.configure(state=DISABLED)
        AI_null_button.configure(state=DISABLED)

    if moves_counter % 2 == 1 or AI_null_point > 0 or AI_krest_point > 0:
        AI_null_button.configure(state=DISABLED)

    if moves_counter % 2 == 0 or AI_null_point > 0 or AI_krest_point > 0:
        AI_krest_button.configure(state=DISABLED)


def AI_krestik(matrix):
    global AI_turn
    global AI_krest_point
    AI_krest_point += 1

    AI_array = []
    array = []
    for row in matrix:
        for item in row:
            array.append(item)

    for i in range(81):
        if array[i] != 0:
            if array[i]["state"] == NORMAL:
                tec = array[i]
                print(f"i = {i}")
                print(f"array[i] = {array[i]}")
                AI_array.append(tec)


    print(f"AI_array = {AI_array}")
    next_AI_turn = random.choice(AI_array)
    print(f"AI_turn is {next_AI_turn}")
    global AI_turn
    AI_turn = not AI_turn
    next_AI_turn.invoke()


def AI_nolik(matrix):
    global AI_null_point
    AI_null_point += 1

    AI_array = []
    array = []
    for row in matrix:
        for item in row:
            array.append(item)

    for i in range(81):
        if array[i] != 0:
            if array[i]["state"] == NORMAL:
                tec = array[i]
                print(f"i = {i}")
                print(f"array[i] = {array[i]}")
                AI_array.append(tec)

    print(f"AI_array = {AI_array}")
    next_AI_turn = random.choice(AI_array)
    print(f"AI_turn is {next_AI_turn}")
    next_AI_turn.invoke()


testb = Button(root, text="правила игры", font='Times 16', height=2, width=18,
               command=lambda: annotation_button()).place(x=1200, y=5)

AI_game = Button(root, text="играть с ИИ", font='Times 16', height=2, width=15, command=lambda: AI_side_button()).place(
    x=850, y=95)

# создание надписи с разработчиками программы
Label(root, text="«Крестики-Нолики на максималках»\nг. Новосибирск, 2023\nРазработчики:\n@cybernetic_anime_girl "
                 "& Христос & @terysol ").place(relx=1, rely=1, anchor='se')

turn_label = Label(root, font='Times 17')
turn_label.place(x=1105, y=33)

canv.pack()
root.mainloop()
