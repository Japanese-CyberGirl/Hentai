from tkinter import *
from touhou import enterMatrix
from touhou import logical_victory_test
from touhou import strategic_victory_test
from touhou import binar_array
import numpy as np
import time

moves_counter = 1  # создание счетчика ходов игроков
root = Tk()
root.geometry("900x750")
root.title("Крестики Нолики на максималках - БММ 2023")
canv = Canvas(root, width=2000, height=2000, bg="white")

buttons = []  # матрица наших клеток-кнопок
# создание проверки вывода победы в стратегическое поле
global match_results
match_results = enterMatrix(9, 9)

global Hakurai_Reimu
Hakurai_Reimu = 0

def main_start_game():
    global Hakurai_Reimu
    print(f"Hakurai Reimu = {Hakurai_Reimu}")
    if Hakurai_Reimu>=1:
        for i in range(9):
            for j in range(9):
                if buttons[i][j]!=0:
                    buttons[i][j].destroy()

    global moves_counter
    global match_results
    moves_counter=1
    buttons.clear() #очистка массива с кнопками
    deleting()  # удаление всех нарисованных линий
    pole() #создание разметки
    buttons_creating() #создание новых кнопок
    Label(root, text="стратегическое поле", font='Times 17').place(x=1350 - 210, y=237) #
    print(f"prev_match_results = {match_results}")
    match_results = enterMatrix(9,9) # очистка матрицы результатов игры, создание новых дефолтных
    binar_array.clear() #очистка бинарного массива
    for i in range(9):
        binar_array.append(69)
    print(f"last_binar_array = {binar_array}")
    techical_function()
    Hakurai_Reimu += 1

    Label(root, text=f"ход: ", font='Times 17').place(x=915, y=90)
    Label(root, text="стратегическое поле", font='Times 17').place(x=1350 - 210, y=237) #
    turn_label.config(text="1")
    print(f"матрица обнулилась - \n {match_results}")



def techical_function():
    line = canv.find_all()
    print(f"количество объектов canv = {len(line)}")



def deleting():
    line = canv.find_all()
    for i in range(26, len(line)):
        canv.delete(line[i])


def playgame(xpos, ypos, i, j, number):  # функция для кнопок - вывод крестика/нолика в зависимости от хода
    global moves_counter
    if moves_counter % 2 == 1:
        print(f"номер  = {number}")
        if number == 27 or number == 54:  # а это костыль =)
            canv.create_line(xpos - 20 + 210, ypos - 20 - 20, xpos + 20 + 210, ypos + 20 - 20, width=3, fill="#e31e1e")
            canv.create_line(xpos + 20 + 210, ypos - 20 - 20, xpos - 20 + 210, ypos + 20 - 20, width=3, fill="#e31e1e")
            match_results[i][j] = 1
            print('условие выполнено')
        else:
            # определение, будет крестик или нолик в зависимости от глобального счетчика
            canv.create_line(xpos - 20 + 210, ypos - 20, xpos + 20 + 210, ypos + 20, width=3, fill="#e31e1e")
            canv.create_line(xpos + 20 + 210, ypos - 20, xpos - 20 + 210, ypos + 20, width=3, fill="#e31e1e")
            match_results[i][j] = 1
    else:
        print(f"номер  = {number}")
        if number == 27 or number == 54:  # а это второй костыль =):
            canv.create_oval(xpos + 20 + 210, ypos - 20 - 20, xpos - 20 + 210, ypos + 20 - 20, outline="blue", width=2)
            match_results[i][j] = 0
            print('условие выполнено')
        else:
            canv.create_oval(xpos + 20 + 210, ypos - 20, xpos - 20 + 210, ypos + 20, outline="blue", width=2)
            match_results[i][j] = 0
    moves_counter += 1
    print(f"счетчик ходов: {moves_counter}")
    buttons[i][j].destroy() # уничтожение кнопки после ее нажатия
    buttons[i][j] = 0
    print(match_results)
    turn_label.config(text=moves_counter)
    # strategic_victory_test(match_results)
    strat_pole_figures_creator(strategic_victory_test(match_results))
    techical_function()
    cirno = np.array(buttons)
    #print(f"buttons = {buttons}")
    #print(f"cirno leng = {cirno.size}")

    if logical_victory_test(binar_array)==1:
        if moves_counter%2!=0:
            print(f"стратегическая победа ноликов")
 
            main_start_game()
        else:
            print("стратегическая победа крестиков")

            main_start_game()



def strat_pole_figures_creator(number):
    global moves_counter
    print(f"strategiv_creator number = {number}")
    if number == 0:
        if moves_counter % 2 == 0:
            canv.create_line(1105, 290, 1195, 375, width=3, fill="#e31e1e")
            canv.create_line(1195, 290, 1105, 375, width=3, fill="#e31e1e")
        else:
            canv.create_oval(1105, 290, 1195, 375, outline="blue", width=2)

    if number == 1:
        if moves_counter % 2 == 0:
            canv.create_line(1205, 290, 1295, 375, width=3, fill="#e31e1e")
            canv.create_line(1295, 290, 1205, 375, width=3, fill="#e31e1e")
        else:
            canv.create_oval(1205, 290, 1295, 375, outline="blue", width=2)

    if number == 2:
        if moves_counter % 2 == 0:
            canv.create_line(1305, 290, 1395, 375, width=3, fill="#e31e1e")
            canv.create_line(1395, 290, 1305, 375, width=3, fill="#e31e1e")
        else:
            canv.create_oval(1305, 290, 1395, 375, outline="blue", width=2)

    if number == 3:
        if moves_counter % 2 == 0:
            canv.create_line(1105, 390, 1195, 475, width=3, fill="#e31e1e")
            canv.create_line(1195, 390, 1105, 475, width=3, fill="#e31e1e")
        else:
            canv.create_oval(1105, 390, 1195, 475, outline="blue", width=2)

    if number == 4:
        if moves_counter % 2 == 0:
            canv.create_line(1205, 390, 1295, 475, width=3, fill="#e31e1e")
            canv.create_line(1295, 390, 1205, 475, width=3, fill="#e31e1e")
        else:
            canv.create_oval(1205, 390, 1295, 475, outline="blue", width=2)

    if number == 5:
        if moves_counter % 2 == 0:
            canv.create_line(1305, 390, 1395, 475, width=3, fill="#e31e1e")
            canv.create_line(1395, 390, 1305, 475, width=3, fill="#e31e1e")
        else:
            canv.create_oval(1305, 390, 1395, 475, outline="blue", width=2)

    if number == 6:
        if moves_counter % 2 == 0:
            canv.create_line(1105, 490, 1195, 575, width=3, fill="#e31e1e")
            canv.create_line(1195, 490, 1105, 575, width=3, fill="#e31e1e")
        else:
            canv.create_oval(1105, 490, 1195, 575, outline="blue", width=2)

    if number == 7:
        if moves_counter % 2 == 0:
            canv.create_line(1205, 490, 1295, 575, width=3, fill="#e31e1e")
            canv.create_line(1295, 490, 1205, 575, width=3, fill="#e31e1e")
        else:
            canv.create_oval(1205, 490, 1295, 575, outline="blue", width=2)

    if number == 8:
        if moves_counter % 2 == 0:
            canv.create_line(1305, 490, 1395, 575, width=3, fill="#e31e1e")
            canv.create_line(1395, 490, 1305, 575, width=3, fill="#e31e1e")
        else:
            canv.create_oval(1305, 490, 1395, 575, outline="blue", width=2)


# создание матрицы, выводящей 0 и 1 в зависимости от того, какая фигура в клетке. изначально везде будет inf

# создание кнопок для игры. - с помощью матрицы и модуля config, фиксируя для каждой кнопки свои уникальные настройки
def buttons_creating():
    testcount = 0

    x = 15  # координата по оси абсцисс
    y = 15  # координата по оси ординат

    local_counter_oy = 0

    for i in range(9):
        local_counter_oy += 1
        local_counter_ox = 0
        buttons.append([])
        for j in range(9):
            local_counter_ox += 1
            but = Button(root, text="", background='white', foreground="white", font='Times 8', height=5,
                         width=11, relief='solid')
            # написать размещение

            if (local_counter_ox == 4 or local_counter_ox == 7):
                but.place(x=x + 20, y=y)
                x += 20

            if (local_counter_oy == 4 or local_counter_oy == 7):
                but.place(x=x, y=y)

            else:
                but.place(x=x, y=y)
            buttons[i].append(but)
            testcount += 1
            x += 75

            if testcount == 27 or testcount == 54:
                y += 20

            but.config(
                command=lambda x=x - 247, y=y + 41, i=i, j=j, testcount=testcount: playgame(x, y, i, j,
                                                                                            testcount))  # фиксация функций клеток
        x = 15
        y += 75
    print(f"buttons = {buttons}")
    cirno = np.array(buttons)
    print(f"cirno leng = {cirno.size}")

def pole():
    # создание мини-поля стратегического положения

    canv.create_line(1100, 380, 1400, 380, width=3)
    canv.create_line(1100, 480, 1400, 480, width=3)
    canv.create_line(1200, 580, 1200, 280, width=3)
    canv.create_line(1300, 580, 1300, 280, width=3)

    canv.create_line(1400, 280, 1400, 580, width=4)
    canv.create_line(1100, 280, 1100, 580, width=4)
    canv.create_line(1100, 580, 1400, 580, width=4)
    canv.create_line(1400, 280, 1100, 280, width=4)

    # создание разделительных линий и размещение полей 3х3 на общем поле (+ разметка).

    canv.create_line(0, 10, 740, 10, width=7)  # 1 горизонтальная линия
    canv.create_line(0, 253, 740, 253, width=7)  # 2 горизонтальная линия
    canv.create_line(0, 497, 740, 497, width=7)  # 3 горизонтальная линия
    canv.create_line(0, 740, 740, 740, width=7)  # 4 горизонтальная линия

    canv.create_line(0, 90, 740, 90, width=3)
    canv.create_line(0, 170, 740, 170, width=3)

    canv.create_line(0, 340, 740, 340, width=3)
    canv.create_line(0, 420, 740, 420, width=3)

    canv.create_line(0, 580, 740, 580, width=3)
    canv.create_line(0, 660, 740, 660, width=3)

    # создание вертикальной разметки

    canv.create_line(5, 10, 5, 740, width=7)  # 1 вертикальная линия
    canv.create_line(250, 10, 250, 740, width=7)  # 2 вертикальная линия
    canv.create_line(495, 10, 495, 740, width=7)  # 3 вертикальная линия
    canv.create_line(737, 10, 737, 740, width=7)  # 4 вертикальная линия

    # мини - линии разметки

    canv.create_line(90, 10, 90, 740, width=3)
    canv.create_line(170, 10, 170, 740, width=3)

    canv.create_line(330, 10, 330, 740, width=3)
    canv.create_line(410, 10, 410, 740, width=3)

    canv.create_line(575, 10, 575, 740, width=3)
    canv.create_line(655, 10, 655, 740, width=3)



# создание кнопки новой игры
btn_new_game = Button(root, text="Новая Игра", font='Times 16', height=2, width=15, command=main_start_game).place(
    x=850, y=5)


# создание надписи с разработчиками программы,
Label(root, text="Большая Математическая Мастерская 2023", font='Times 17').place(x=1209 - 200, y=850 - 85)
Label(root, text="''Крестики-Нолики на максималках''", font='Times 17').place(x=1209 - 200, y=885 - 85)
Label(root, text="г. Новосибирск, 2023", font='Times 17').place(x=1209 - 200, y=955 - 85)
Label(root, text="Разработчики - @cybernetic_anime_girl & Христос", font='Times 17').place(x=1209 - 200, y=920 - 85)
# создание надписи с разработчиками программы

turn_label = Label(root, font='Times 17')
turn_label.place(x=965, y=90)


canv.pack()
root.mainloop()
