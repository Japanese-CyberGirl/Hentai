from tkinter import *
from math import sqrt
from tkinter.filedialog import askopenfilename
import csv
import numpy as np
moves_counter = 1 #создание счетчика ходов игроков
root = Tk()
root.geometry("1250x500")
root.title("Крестики Нолики на максималках - БММ 2023")
canv = Canvas(root, width=1500, height=1000, bg="white")

def proverka_tac_polya(start_x, start_y):
    print(match_results[start_x,start_y])
    if (match_results[start_x,start_y]==match_results[start_x+1,start_y] and
        match_results[start_x+2,start_y]):
        print("AAAA")

def TESTOVAYA():
    print("HENTAI ANIME LOLI")

def enterMatrix(x,y):
    """
    заполение массива расстояний на основе координат

    :return:
    """
    branch = np.zeros([(x), (y)])  # Шаблон матрицы
    for i in np.arange(0, x, 1):
        for j in np.arange(0, y, 1):
                branch[i, j] = float('inf')
    return branch


def playgame(xpos,ypos,i,j, number): #функция для кнопок - вывод крестика/нолика в зависимости от хода
    global moves_counter
    if moves_counter%2==1:
        #определение, будет крестик или нолик в зависимости от глобального счетчика
        canv.create_line(xpos-46, ypos-46, xpos+46, ypos + 46, width=3, fill="#e31e1e")
        canv.create_line(xpos+46, ypos-46, xpos - 46, ypos + 46, width = 3, fill="#e31e1e")
        match_results[i][j] = 1
    else:

        canv.create_oval(xpos+46, ypos - 46, xpos-46, ypos+46, outline="blue",width=2)
        match_results[i][j] = 0

    moves_counter += 1
    print(f"счетчик ходов: {moves_counter}")
    buttons[i][j].destroy() #уничтожение кнопки после ее нажатия
    print(match_results)
    proverka_tac_polya(0,1)

def pole(xpos, ypos): # функция создания одного поля 3х3
    canv.create_line(xpos - 50, ypos - 150, xpos - 50, ypos + 150, width = 3)
    canv.create_line(xpos + 50, ypos - 150, xpos + 50, ypos + 150, width = 3)
    canv.create_line(xpos - 150, ypos + 50, xpos + 150, ypos + 50, width = 3)
    canv.create_line(xpos - 150, ypos - 50, xpos + 150, ypos - 50, width = 3)

#создание мини-поля стратегического положения

canv.create_line(1100,380,1400,380, width = 3)
canv.create_line(1100,480,1400,480, width = 3)
canv.create_line(1200,580,1200,280, width = 3)
canv.create_line(1300,580,1300,280, width = 3)

canv.create_line(1400,280,1400,580, width = 4)
canv.create_line(1100,280,1100,580, width = 4)
canv.create_line(1100,580,1400,580, width = 4)
canv.create_line(1400,280,1100,280, width = 4)


#создание разделительных линий и размещение полей 3х3 на общем поле.

#canv.create_line(65, 75, 65, 985, width = 7) #1 вертикальная линия

#canv.create_line(43, 76, 978, 76, width = 7) #1 горизонтальная линия

#canv.create_line(355, 80, 355, 1000, width = 7) #2 вертикальная линия

#canv.create_line(43, 385, 978, 385, width = 7) #2 горизонтальная линия

#canv.create_line(665, 80, 665, 1000, width = 7) #3 вертикальная линия

#canv.create_line(43, 695, 978, 695, width = 7) #3 горизонтальная линия

#canv.create_line(975, 80, 975, 1000, width = 7) #4 вертикальная линия

#canv.create_line(43, 1000, 978, 1000, width = 7) #4 горизонтальная линия



#создание матрицы, выводящей 0 и 1 в зависимости от того, какая фигура в клетке. изначально везде будет inf

#создание кнопок для игры. - с помощью матрицы и модуля config, фиксируя для каждой кнопки свои уникальные настройки

x = 275 # координата по оси абсцисс
y = 75  # координата по оси ординат

buttons = [] #матрица наших клеток-кнопок
local_counter_oy = 0

testcount=1 # я не знаю как это заработало, но это заработало. не трогайте, пожалуйста, эту часть кода (((вообще не трогайте!)))
for i in range(9):
    local_counter_oy += 1
    local_counter_ox = 0
    buttons.append([])
    for j in range(9):
        local_counter_ox += 1
        but = Button(root, text="", background = 'white' , foreground = "white", font='Times 11', height=5,width=11, relief='solid')
        but.config(command=lambda x=x-158, y=y+50, i=i, j=j: playgame(x,y,i,j,testcount)) #фиксация функций клеток

        #написать размещение
        if testcount==37 or testcount==64:
            y+=10

        if (local_counter_ox==4 or local_counter_ox==7):
            but.place(x=x+10,y=y)
            x+=10

        if (local_counter_oy==4 or local_counter_oy==7):
            but.place(x=x,y=y+10)

        else:
            but.place(x=x,y=y)
        buttons[i].append(but)
        testcount+=1
        x += 100
    x = 275
    y += 100




# функции отрисовки крестика/нолика в стратегическом поле.

def A_K(local_winner):
    if local_winner == 1:
        canv.create_line(1105, 290, 1195, 375, width=3, fill="#e31e1e")
        canv.create_line(1195, 290, 1105, 375, width=3, fill="#e31e1e")
    else:
        canv.create_oval(1105,290,1195,375, outline="blue", width=2)

def B_K(local_winner):
    if local_winner == 1:
        canv.create_line(1205, 290, 1295, 375, width=3, fill="#e31e1e")
        canv.create_line(1295, 290, 1205, 375, width=3, fill="#e31e1e")
    else:
        canv.create_oval(1205,290,1295,375, outline="blue", width=2)

def C_K(local_winner):
    if local_winner == 1:
        canv.create_line(1105, 290, 1195, 375, width=3, fill="#e31e1e")
        canv.create_line(1195, 290, 1105, 375, width=3, fill="#e31e1e")
    else:
        canv.create_oval(1105,290,1195,375, outline="blue", width=2)

def D_K(local_winner):
    if local_winner==1:
        canv.create_line(1105, 390, 1195, 475, width=3, fill="#e31e1e")
        canv.create_line(1195, 390, 1105, 475, width=3, fill="#e31e1e")
    else:
        canv.create_oval(1105,390,1195,475, outline="blue", width=2)

def E_K(local_winner):
    if local_winner==1:
        canv.create_line(1205, 390, 1295, 475, width=3, fill="#e31e1e")
        canv.create_line(1295, 390, 1205, 475, width=3, fill="#e31e1e")
    else:
        canv.create_oval(1205,390,1295,475, outline="blue", width=2)

def F_K(local_winner):
    if local_winner==1:
        canv.create_line(1305, 390, 1395, 475, width=3, fill="#e31e1e")
        canv.create_line(1395, 390, 1305, 475, width=3, fill="#e31e1e")
    else:
        canv.create_oval(1305,390,1395,475, outline="blue", width=2)

def G_K(local_winner):
    if local_winner==1:
        canv.create_line(1105, 490, 1195, 575, width=3, fill="#e31e1e")
        canv.create_line(1195, 490, 1105, 575, width=3, fill="#e31e1e")
    else:
        canv.create_oval(1105,490,1195,575, outline="blue", width=2)

def H_K(local_winner):
    if local_winner==1:
        canv.create_line(1205, 490, 1295, 575, width=3, fill="#e31e1e")
        canv.create_line(1295, 490, 1205, 575, width=3, fill="#e31e1e")
    else:
        canv.create_oval(1205,490,1295,575, outline="blue", width=2)

def I_K(local_winner):
    if local_winner==1:
        canv.create_line(1305, 490, 1395, 575, width=3, fill="#e31e1e")
        canv.create_line(1395, 490, 1305, 575, width=3, fill="#e31e1e")
    else:
        canv.create_oval(1305,490,1395,575, outline="blue", width=2)


#создание проверки вывода победы в стратегическое поле
match_results = enterMatrix(9, 9)

print(match_results)

strategic_results = enterMatrix(3, 3)
print(f"strategic results =\n {strategic_results}")



#создание кнопки новой игры
btn_new_game = Button(root, text="Новая Игра", font='Times 16', height=2,width=15).place(x=850, y=5)

quitButton = Button(root, text="Закрыть окно", font='Times 16', height=2,width=15, command=quit)
quitButton.place(x=1200, y=5)
canv.pack()


#создание надписи с разработчиками программы,
Label(root,text="Большая Математическая Мастерская 2023",font='Times 17').place(x=1282,y=850)
Label(root,text="''Крестики-Нолики на максималках''",font='Times 17').place(x=1352,y=885)
Label(root,text="г. Новосибирск, 2023",font='Times 17').place(x=1495,y=955)
Label(root,text="разработчики - @cybernetic_anime_girl & Христос",font='Times 17').place(x=1209,y=920)
Label(root,text="стратегическое поле",font='Times 17').place(x=1350,y=237)
Label(root,text="стратегическое поле",font='Times 17').place(x=1350,y=237)



root.mainloop()

