import numpy as np
from tkinter import *

binar_array = []


def enterMatrix(x,y):
    """
    заполение массива расстояний на основе координат
    :return:
    """

    counter = 0
    branch = np.zeros([(x), (y)])  # Шаблон матрицы
    for i in np.arange(0, x, 1):
        for j in np.arange(0, y, 1):
                branch[i, j] = 69
                counter += 1
    return branch




def LOLICHAN_POBEDA_STRAT_POLYA(array,matrix_amounts,counter):
    if ((array[matrix_amounts] == array[matrix_amounts + 1] == array[matrix_amounts + 2] and array[matrix_amounts] != 69)):
        if binar_array[counter]==69:
            if array[matrix_amounts]==1:
                binar_array[counter]=1
            else:
                binar_array[counter]=0
            return 1

    elif ((array[matrix_amounts+9] == array[matrix_amounts + 10] == array[matrix_amounts + 11] and array[matrix_amounts+9] != 69)):
        if binar_array[counter]==69:
            if array[matrix_amounts+9]==1:
                binar_array[counter]=1
            else:
                binar_array[counter]=0
            return 1

    elif ((array[matrix_amounts+18] == array[matrix_amounts + 19] == array[matrix_amounts + 20] and array[matrix_amounts+18] != 69)):
        if binar_array[counter]==69:
            if array[matrix_amounts+18]==1:
                binar_array[counter]=1
            else:
                binar_array[counter]=0
            return 1

    elif ((array[matrix_amounts] == array[matrix_amounts + 9] == array[matrix_amounts + 18] and array[matrix_amounts] != 69)):
        if binar_array[counter]==69:
            if array[matrix_amounts]==1:
                binar_array[counter]=1
            else:
                binar_array[counter]=0
            return 1

    elif ((array[matrix_amounts+1] == array[matrix_amounts + 10] == array[matrix_amounts + 19] and array[matrix_amounts+1] != 69)):
        if binar_array[counter]==69:
            if array[matrix_amounts+1]==1:
                binar_array[counter]=1
            else:
                binar_array[counter]=0
            return 1

    elif ((array[matrix_amounts+2] == array[matrix_amounts + 11] == array[matrix_amounts + 20] and array[matrix_amounts+2] != 69)):
        if binar_array[counter]==69:
            if array[matrix_amounts+2]==1:
                binar_array[counter]=1
            else:
                binar_array[counter]=0
            return 1

    elif ((array[matrix_amounts] == array[matrix_amounts + 10] == array[matrix_amounts + 20] and array[matrix_amounts] != 69)):
        if binar_array[counter]==69:
            if array[matrix_amounts]==1:
                binar_array[counter]=1
            else:
                binar_array[counter]=0
            return 1

    elif ((array[matrix_amounts+2] == array[matrix_amounts + 10] == array[matrix_amounts + 18] and array[matrix_amounts+2] != 69)):
        if binar_array[counter]==69:
            if array[matrix_amounts]==1:
                binar_array[counter]=1
            else:
                binar_array[counter]=0
            return 1

    else:
        return 0


def strategic_victory_test(matrix):
    array = []
    for row in matrix:
        for item in row:
            array.append(item)


    print(f"amount of array = {len(array)}")
    matrix_amounts=0
    for counter in range (9):

        if LOLICHAN_POBEDA_STRAT_POLYA(array,matrix_amounts,counter)==1:
            print(f"pobeda v pole = {counter}")
            print(f"binar_array = {binar_array}")
            return counter

        matrix_amounts+=3
        if (counter==2 or counter==5):
            matrix_amounts+=18

    print(f"binar_array = {binar_array}")


def logical_victory_test(array):
    if array[0]==array[1]==array[2] and array[0]!=69:
        return 1
    elif array[3]==array[4]==array[5] and array[3]!=69:
        return 1
    elif array[6]==array[7]==array[8] and array[6]!=69:
        return 1
    elif array[0]==array[3]==array[6] and array[0]!=69:
        return 1
    elif array[1]==array[4]==array[7] and array[1]!=69:
        return 1
    elif array[2]==array[5]==array[8] and array[2]!=69:
        return 1
    elif array[0]==array[4]==array[8] and array[0]!=69:
        return 1
    elif array[2]==array[4]==array[6] and array[2]!=69:
        return 1
    else:
        return 0
